1) Creating classes

Create a Movie Class with the following structure

Movie
- title 
- year 
- duration
+ constructor(name, year, duration) 
+ play() 
+ pause()
+ resume()
Instantiate some of your favorite movies and play with them in the console.

Create an Actor class with the following structure

Actor
- name 
- age
+ constructor(name, age)
Create a class called EventEmitter with the following structure

EventEmitter
+ constructor()
+ on(eventName, callback) 
+ emit(eventName)
+ off(eventName, callback)
The on method will receive a eventName and a callback or listener that will be executed each time a that event is triggered.

The emit method will trigger events to be consumed by other functions or objects.

The off method will delete previously defined event listeners.



2) Class heritage

Make the Movie class a subclass of EventEmitter and use the inherited methods to publish play, pause and resumeevents when the related method is called.

3) Working with classes

Add a method to Movie as addCast(cast) that allows the addition of one or more Actors to a move. It must accept if provided more than one Actor at the same time.

You should be able to do something like

const terminator = new Movie('Terminator I', 1985, 60);
const arnold = new Actor('Arnold Schwarzenegger', 50);
const actors = [
    new Actor('Paul Winfield', 50),
    new Actor('Michael Biehn', 50),
    new Actor('Linda Hamilton', 50)
];

terminator.addCast(arnold);
terminator.addCast(otherCast);
Create a Logger class with the following structure

Logger
+ constructor()
+ log(info)
After creating this class make an instance of Logger and make it listen to Movie's play event.

As example you must end with something like

const terminator = new Movie('Terminator I', 1985, 60);

...

terminator.play(); // output: The 'play' event has been emitted

4) Mixins

Create an object called social, defining the methods share(friendName) and like(friendName) that generates the following output {friendName} likes/share {movieName}.

Then extend a movie with it to have access to this methods.

You should end with something like

const ironman = new Movie(...);

...

ironman.share('Mike Blossom');
Hint: A mixin is not a class which will be instantiated later on. Use a way to extend some object methods into another object. Template literals might be useful to generate the required output.

5) ES6 Modules

Split all your classes into different files.

Using babel create a single JS bundle.